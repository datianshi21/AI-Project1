# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first
    [2nd Edition: p 75, 3rd Edition: p 87]

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm
    [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    closedNode = set()
    Data_Structure = util.Stack()
    Path = []
    
    Path_Tuple = ()
    
    #Step1: Find if there's a valid problem.
    if "startState" in dir(problem):
        nodeCoordStartState = problem.startState
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    elif "getStartState" in dir(problem):
        nodeCoordStartState = problem.getStartState()
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    else:
        raise Exception("No recognizable function for getting the Start State")
    
    #Step2: Push the node into the Stack and find the goal.
    Data_Structure.push(Path_Tuple)
    
    Final_Path = Searching(problem, Data_Structure, Path_Tuple, closedNode)
    
    if Final_Path is None:
        raise Exception("There's no valid path")
    
    Path = Reconstruct_The_Path(Final_Path)
    return Path

def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    [2nd Edition: p 73, 3rd Edition: p 82]
    """
    "*** YOUR CODE HERE ***"
    #Define the variables
    closedNode = set()
    Data_Structure = util.Queue()
    Path = []
    
    Path_Tuple = ()
    
    #Step1: Find if there's a valid problem.
    if "startState" in dir(problem):
        nodeCoordStartState = problem.startState
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    elif "getStartState" in dir(problem):
        nodeCoordStartState = problem.getStartState()
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    else:
        raise Exception("No recognizable function for getting the Start State")
    
    #Step2: Push the node into the Stack and find the goal.
    Data_Structure.push(Path_Tuple)
    
    Final_Path = Searching(problem, Data_Structure, Path_Tuple, closedNode)
    
    if Final_Path is None:
        raise Exception("There's no valid path")
    
    Path = Reconstruct_The_Path(Final_Path)
    return Path

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    "*** YOUR CODE HERE ***"
    closedNode = set()
    Data_Structure = util.PriorityQueueWithFunction(lambda (Path): problem.getCostOfActions(Reconstruct_The_Path(Path)))
    Path = []
    
    Path_Tuple = ()
    
    #Step1: Find if there's a valid problem.
    if "startState" in dir(problem):
        nodeCoordStartState = problem.startState
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    elif "getStartState" in dir(problem):
        nodeCoordStartState = problem.getStartState()
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    else:
        raise Exception("No recognizable function for getting the Start State")
    
    #Step2: Push the node into the Stack and find the goal.
    Data_Structure.push(Path_Tuple)
    
    Final_Path = Searching(problem, Data_Structure, Path_Tuple, closedNode)
    
    if Final_Path is None:
        raise Exception("There's no valid path")
    
    Path = Reconstruct_The_Path(Final_Path)
    return Path

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    "*** YOUR CODE HERE ***"
    closedNode = set()
    Data_Structure = util.PriorityQueueWithFunction(HeristicFucnction(problem, heuristic))
    Path = []
    
    Path_Tuple = ()
    
    #Step1: Find if there's a valid problem.
    if "startState" in dir(problem):
        nodeCoordStartState = problem.startState
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    elif "getStartState" in dir(problem):
        nodeCoordStartState = problem.getStartState()
        Path_Tuple = ((nodeCoordStartState, "", 0), )
    else:
        raise Exception("No recognizable function for getting the Start State")
    
    #Step2: Push the node into the Stack and find the goal.
    Data_Structure.push(Path_Tuple)
    
    Final_Path = Searching(problem, Data_Structure, Path_Tuple, closedNode)
    
    if Final_Path is None:
        raise Exception("There's no valid path")
    
    Path = Reconstruct_The_Path(Final_Path)
    return Path
    
def Reconstruct_The_Path(path):
    pathList = []
    for arc in path:
        if arc[1] is not "":
            pathList.append(arc[1])
    return pathList
    
def Searching(problem=None, Data_Structure=util.Stack(), sourceNode=(((0,0), "", 0)), closedNode = None):
    '''
    This function takes the problem and find the soulution of the path. If there's not
    a path, return None.
    '''
    
    nodeLocationIndex = 0
    nodeArcDrictionIndex = 1
    nodeArcCostIndex = 2
    problemStateIndex = 3
    
    #If there's no problem, return none
    if problem is None:
        print "None problem"
        return None
    
    #If the data structure is null, return none
    if Data_Structure.isEmpty():
        print "Empty data structure"
        return None
    
    while not Data_Structure.isEmpty():
        Path = Data_Structure.pop()
        Current_Node = Path[-1] #The last element is the problemStateIndex
        NodeCord = Current_Node[nodeLocationIndex]
        NodeDir_Assumed = Current_Node[nodeArcCostIndex]
        problemState = None
        
        #Check if the node is in closedSet, if it was, continue to the next iteration
        if closedNode is not None and NodeCord in closedNode:
            continue
        
        if problemState is not None and problem.isGoalState(problemState):
            return Path
        
        if problemState is None and problem.isGoalState(NodeCord):
            return Path
        
        successors = ()
        successors = problem.getSuccessors(NodeCord)
        
        #If there is no successors, just continue to the next node
        if not successors:
            continue
        
        #Store the nodes into the Data_Structure
        successor_num = len(successors)
        for node in successors:
            Data_Structure.push(tuple(list(Path) + [node]))
        
        if closedNode is not None:
            closedNode.add(NodeCord)
            
    return None

def f_cost(g_cost, h_cost):
    return g_cost + h_cost

def HeristicFucnction(problem, heuristic):
    return lambda (Path):f_cost(problem.getCostOfActions(Reconstruct_The_Path(Path)), heuristic(Path[-1][0], problem))

# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
